version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: datazen_postgres
    environment:
      POSTGRES_USER: ${DB_USER:-datazen}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-datazen_secure_password}
      POSTGRES_DB: ${DB_NAME:-datazen_saas}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-datazen}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datazen_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: datazen_backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-datazen}:${DB_PASSWORD:-datazen_secure_password}@postgres:5432/${DB_NAME:-datazen_saas}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - datazen_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Frontend (Optional - for development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: datazen_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - datazen_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: datazen_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - datazen_network

volumes:
  postgres_data:
    driver: local

networks:
  datazen_network:
    driver: bridge

